70. 爬楼梯
class Solution {
public:
    int climbStairs(int n) {
        if(n<=1) return n;
        vector<int> f(n + 1);
        f[1] = 1;
        f[2] = 2;
        for(int i = 3;i<=n;i++){
            f[i]=f[i-1]+f[i-2];//第n层到达的方法等于第n-1层的方法+第n-2层的方法
        }
        return f[n];

    }
};

120. 三角形最小路径和
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> f(n, vector<int>(n));
        f[0][0] = triangle[0][0];
        int ans;
        for (int i = 1; i < n; ++i) {
            f[i][0] = f[i - 1][0] + triangle[i][0];
            for (int j = 1; j < i; ++j) {
                f[i][j] = min(f[i - 1][j - 1], f[i - 1][j]) + triangle[i][j];
            }
            f[i][i] = f[i - 1][i - 1] + triangle[i][i];
        }
        ans = f[n-1][0];
        for(int m = 0;m < n;m++){
            ans = min(f[n-1][m],ans);
        }
        return ans;
    }
};